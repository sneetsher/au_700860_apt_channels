#!/usr/bin/python3

import sys,os
import re

## check syntax

def usage():
    print("""
Usage:

  Simulation: prints to stdout, no file change
  
    apt-add-update COMMAND CHANNEL [FILE]

  Effective: updates /etc/apt/sources.list
  
    sudo apt-add-update COMMAND CHANNEL

Commands:
  disable
  enable

Channels:
  default
  ""
  updates
  security
  proposed
  backports
    """)

commands=["enable","disable"]
channels=["","security","updates","proposed","backports"]

if len(sys.argv)<3:
    #TODO: print error not enough args
    usage()
    sys.exit(1)
elif sys.argv[1] not in commands:
    #TODO: print error unkown cmd
    usage()
    sys.exit(1)
elif sys.argv[2] not in channels and sys.argv[2]!="default":
    #TODO: print error unkown ch
    usage()
    sys.exit(1)
    
## official repo's, needed regex

#http://ports.ubuntu.com/ubuntu-ports/
#http://old-releases.ubuntu.com/ubuntu/
#http://security.ubuntu.com/ubuntu/
#http://archive.ubuntu.com/ubuntu/

repo_official_uri_re = re.compile(r"\A(http|ftp)://(([a-zA-Z]*.)?archive|security|old-releases|ports).ubuntu.com/ubuntu(-ports)?[/]?\Z")

## load other cummunity mirrors, collected from python-apt 

mirrors=[]
mir_re = re.compile(r"\A(http|ftp)://")

ifile="/usr/share/python-apt/templates/Ubuntu.mirrors"

if os.path.isfile(ifile):
    with open(ifile,"r") as f:
        for l in f:
            if mir_re.match(l):
                mirrors.append(l.strip())
    f.close()
else:
    #TODO: print error, couldn't load mirrors list (please, install python-apt). all unkown mirrors will be treated as 3rd party repo.
    pass


#print(mirrors)

## system release

ifile="/etc/lsb-release"

if not os.path.isfile(ifile):
    #TODO: print error
    sys.exit(1)
    
with open(ifile,"r") as f:
    for l in f:
        k,v=l.split("=")
        if k=="DISTRIB_CODENAME":
            release = v.strip()
            break
f.close()
#print(release)

## load sources.list

##TODO: missing support deb line options like [ arch=whatever ] 
emp_re  = re.compile(r"\A\s*\Z")
repo_re = re.compile(r"\A#* *deb(-src)? *(http://|ftp://|file://|cdrom:)")
com_re  = re.compile(r"\A#")
repo_details_re = re.compile(r"\A(?P<active>#*) *(?P<type>deb(-src)?) *(?P<uri>(http://|ftp://|file://|cdrom:\[[a-zA-Z0-9 \-_().]*\])?\S*) (?P<dist>[a-zA-Z\-_]*) (?P<comp>[a-zA-Z ]*\Z)")
        
## structure example for debian source entry
sources={
  "http://archive.ubuntu.com/ubuntu/":{
    "active":True,
    "deb":{
      "wily":["universe","multiverse","restricted","main"],
      "wily-security":["main","restricted","universe","multiverse"]
      },
    "deb-src":{
      "wily":["universe","multiverse","restricted","main"]
      },
    "mirror":True    
    }
  }

sources={}

## add alternative input for testing or process on the fly
if len(sys.argv)>=4:
    ifile = sys.argv[3]
else:
    ifile = "/etc/apt/sources.list"

if not os.path.isfile(ifile):
    #TODO: print error
    sys.exit(1)

with open(ifile, "r") as f:
    for l in f:
        l=l.strip()

        r = emp_re.match(l)
        if r:
            continue
        else:
            #print("raw:",l)
            r = repo_re.match(l)
            if r:
                #print("repository:",l)
                r = repo_details_re.match(l)
                #print(r.groupdict())
                uri=r.group("uri")
                if uri[-1]!="/":
                    uri += "/"
                if (uri not in sources):
                    sources[uri] = {"active":False,"deb":{},"deb-src":{},"mirror":False}
                    m = repo_official_uri_re.match(uri)
                    if m or uri in mirrors:
                        sources[uri]["mirror"] = True
                    if r.group("active")=="":
                            sources[uri]["active"]=True
                    sources[uri][r.group("type")][r.group("dist")]=r.group("comp").split()
                else:
                    if r.group("active")=="" and sources[uri]["active"]==False:
                        sources[uri]["active"]=True
                        sources[uri]["deb"]={}
                        sources[uri]["deb-src"]={}
                        sources[uri][r.group("type")][r.group("dist")]=r.group("comp").split()
                    if (r.group("active")=="")==sources[uri]["active"]:
                        if r.group("dist") not in sources[uri][r.group("type")]:
                            sources[uri][r.group("type")][r.group("dist")]=r.group("comp").split()
                        else:
                            for c in r.group("comp").split():
                                if c not in sources[uri][r.group("type")][r.group("dist")]:
                                    sources[uri][r.group("type")][r.group("dist")].append(c)
            else:
                r = com_re.match(l)
                if r:
                    #print("comment",l)
                    continue
                else:
                    print("unknown",l)
    #print(sources)
f.close()

## process argumments

#fallback for default component to be copied from
update_channels=[release+"-security",release+"-update",release+"-proposed"]
found_other_dist=False 

if sys.argv[2]=="default" and sys.argv[1]=="enable":
    for u in sorted(sources.keys()):
        if sources[u]["mirror"]:
            if sources[u]["active"]:
                for t in ["deb","deb-src"]:
                    if release not in sources[u][t]:
                        for d in range(len(update_channels)):
                            if update_channels[d] in sources[u][t]:
                                found_other_dist=True
                                for i in range(d):
                                    sources[u][t][update_channels[i]]=sources[u][t][update_channels[d]]
                                sources[u][t][release]=sources[u][t][update_channels[d]]
                                
                        ###don't activate any thing if commented like an empty file.
                        #if not found_other_dist and t=="deb":
                        #   sources[u][t][release]=["main"]
            #else:
            #   sources[u]["active"]=True
            #   sources[u]["deb"]={release:["main"]}
            #   sources[u]["deb-src"]={}
                
    ## carry on enable security
    sys.argv[2] = "security"

for u in sorted(sources.keys()):
    if sources[u]["mirror"] and sources[u]["active"]:
        if sys.argv[1]=="disable":
            if len(sources[u]["deb"])+len(sources[u]["deb-src"])>(release+"-"+sys.argv[2] in sources[u]["deb"])+(release+"-"+sys.argv[2] in sources[u]["deb-src"]):
                if release+"-"+sys.argv[2] in sources[u]["deb"]:
                    del sources[u]["deb"][release+"-"+sys.argv[2]]
                if release+"-"+sys.argv[2] in sources[u]["deb-src"]:
                    del sources[u]["deb-src"][release+"-"+sys.argv[2]]
            else:
                sources[u]["active"] = False
        elif sys.argv[1]=="enable":
            for t in ["deb","deb-src"]:
                if release in sources[u][t]:
                    if release+"-"+sys.argv[2] not in sources[u][t]:
                        sources[u][t][release+"-"+sys.argv[2]]=sources[u][t][release]
                    else:
                        for c in sources[u][t][release]:
                            if c not in sources[u][t][release+"-"+sys.argv[2]]:
                                sources[u][t][release+"-"+sys.argv[2]].append(c)

## generate the new list
data_out=""
for u in sorted(sources.keys()):
    #print(u)
    for t in ["deb","deb-src"]:
        for d in sorted(sources[u][t].keys()):
            data_out += (not sources[u]["active"])*"#"+" ".join([t,u,d,""])+" ".join(sorted(sources[u][t][d]))+"\n"

if len(sys.argv)<4 and not os.access("/etc/apt/sources.list", os.W_OK):
    #TODO: print error but don't exit cont. print to sdtout
    pass

if len(sys.argv)>=4 or not os.access("/etc/apt/sources.list", os.W_OK):
    print(data_out)
else:
    with open("/etc/apt/sources.list","w") as f:
        f.write(data_out)
    f.close()
        
sys.exit(0)
